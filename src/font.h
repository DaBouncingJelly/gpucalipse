#pragma once

#include <d3d11.h>
#include "common.h"

namespace glfont {

// clang-format off
static int glyphs[] = {
    // !
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,0,0,0,
    0,1,0,0,

    // ""
    1,0,1,0,
    1,0,1,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // #
    0,0,0,0,
    0,0,1,0,
    1,1,1,1,
    0,0,0,0,
    1,1,1,1,
    0,1,0,0,
    0,0,0,0,

    // $
    0,1,1,0,
    1,0,0,1,
    1,0,0,0,
    0,1,1,0,
    0,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // %
    0,0,0,0,
    0,0,1,0,
    1,0,1,0,
    0,0,0,0,
    0,1,0,1,
    0,1,0,0,
    0,0,0,0,

    // &
    0,1,1,0,
    1,0,0,1,
    1,0,0,0,
    0,1,0,0,
    1,0,1,0,
    1,0,0,1,
    0,1,1,0,

    // '
    0,1,0,0,
    0,1,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // (
    0,0,1,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,0,1,0,

    // )
    0,1,0,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,1,0,0,

    // *
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // +
    0,0,0,0,
    0,0,0,0,
    0,1,0,0,
    1,1,1,0,
    0,1,0,0,
    0,0,0,0,
    0,0,0,0,

    // ,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,1,0,
    0,1,0,0,

    // -
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // .
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,0,0,

    // /
    0,0,0,0,
    0,0,1,0,
    0,0,1,0,
    0,0,0,0,
    0,1,0,0,
    0,1,0,0,
    0,0,0,0,

    // 0
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // 1
    0,0,1,0,
    0,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,

    // 2
    0,1,1,0,
    1,0,0,1,
    0,0,0,1,
    0,0,1,0,
    0,1,0,0,
    1,0,0,0,
    1,1,1,1,

    // 3
    0,1,1,0,
    1,0,0,1,
    0,0,0,1,
    0,0,1,0,
    0,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // 4
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    0,0,0,1,
    0,0,0,1,
    0,0,0,1,

    // 5
    1,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    0,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // 6
    0,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // 7
    1,1,1,1,
    0,0,0,1,
    0,0,1,0,
    0,0,1,0,
    0,1,0,0,
    1,0,0,0,
    1,0,0,0,

    // 8
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // 9
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    0,0,0,1,
    0,0,0,1,
    0,1,1,0,

    // :
    0,0,0,0,
    0,0,0,0,
    0,1,0,0,
    0,0,0,0,
    0,1,0,0,
    0,0,0,0,
    0,0,0,0,

    // ;
    0,0,0,0,
    0,0,0,0,
    0,0,1,0,
    0,0,0,0,
    0,0,1,0,
    0,1,0,0,
    0,0,0,0,

    // <
    0,0,0,0,
    0,0,0,0,
    0,0,1,0,
    0,1,0,0,
    0,0,1,0,
    0,0,0,0,
    0,0,0,0,

    // =
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    0,0,0,0,
    0,1,1,0,
    0,0,0,0,
    0,0,0,0,

    // >
    0,0,0,0,
    0,0,0,0,
    0,1,0,0,
    0,0,1,0,
    0,1,0,0,
    0,0,0,0,
    0,0,0,0,

    // ?
    0,1,1,0,
    1,0,0,1,
    0,0,0,1,
    0,0,1,0,
    0,1,0,0,
    0,0,0,0,
    0,1,0,0,

    // @
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    1,0,0,1,
    1,0,1,1,
    1,0,0,0,
    0,1,1,1,

    // A
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // B
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,

    // C
    0,1,1,0,
    1,0,0,1,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,1,
    0,1,1,0,

    // D
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,

    // E
    1,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    1,0,0,0,
    1,0,0,0,
    1,1,1,1,

    // F
    1,1,1,1,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,

    // G
    0,1,1,0,
    1,0,0,1,
    1,0,0,0,
    1,0,1,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // H
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // I
    1,1,1,1,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    1,1,1,1,

    // J
    1,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    1,0,1,0,
    0,1,0,0,

    // K
    1,0,0,1,
    1,0,1,0,
    1,1,0,0,
    1,1,0,0,
    1,0,1,0,
    1,0,0,1,
    1,0,0,1,

    // L
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,1,1,1,

    // M
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // N
    1,0,0,1,
    1,1,0,1,
    1,1,0,1,
    1,0,1,1,
    1,0,1,1,
    1,0,0,1,
    1,0,0,1,

    // O
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // P
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,

    // Q
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,1,0,
    0,1,0,1,

    // R
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,
    1,0,1,0,
    1,0,0,1,
    1,0,0,1,

    // S
    0,1,1,0,
    1,0,0,1,
    1,0,0,0,
    0,1,1,0,
    0,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // T
    1,1,1,1,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    // U
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // V
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    0,1,1,0,

    // W
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,

    // X
    1,0,0,1,
    1,0,0,1,
    0,1,0,0,
    0,0,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // Y
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,
    0,0,0,1,
    0,0,0,1,
    0,1,1,0,

    // Z
    1,1,1,1,
    0,0,0,1,
    0,0,1,0,
    0,0,0,0,
    0,1,0,0,
    1,0,0,0,
    1,1,1,1,

    // [
    0,1,1,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,1,0,

    // '\'
    0,0,0,0,
    0,1,0,0,
    0,1,0,0,
    0,0,0,0,
    0,0,1,0,
    0,0,1,0,
    0,0,0,0,

    // ]
    0,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,0,
    0,1,1,0,

    // ^
    0,1,0,0,
    1,0,1,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // _
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,1,1,0,

    // `
    0,1,0,0,
    0,0,1,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,

    // a
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    0,0,0,1,
    0,1,1,1,
    1,0,0,1,
    0,1,1,1,

    // b
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,0,

    // c
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,1,
    1,0,0,0,
    1,0,0,0,
    0,1,1,1,

    // d
    0,0,0,1,
    0,0,0,1,
    0,0,0,1,
    0,1,1,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,

    // e
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    1,1,1,1,
    1,0,0,0,
    0,1,1,1,

    // f
    0,0,1,0,
    0,1,0,1,
    0,1,0,0,
    1,1,1,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    // g
    0,0,0,0,
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,
    1,0,0,1,
    0,1,1,0,

    // h
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // i
    0,0,0,0,
    0,1,0,0,
    0,0,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    // j
    0,1,0,0,
    0,0,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    1,1,0,0,

    // k
    1,0,0,0,
    1,0,0,0,
    1,0,0,0,
    1,0,0,1,
    1,0,1,0,
    1,1,1,0,
    1,0,0,1,

    // l
    1,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,1,0,

    // m
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,
    1,0,0,1,

    // n
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,1,1,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,

    // o
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,

    // p
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,1,1,0,
    1,0,0,1,
    1,1,1,0,
    1,0,0,0,

    // q
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    1,0,0,1,
    1,0,1,0,
    0,1,0,1,

    // r
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,0,1,
    0,1,1,0,
    0,1,0,0,
    0,1,0,0,

    // s
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    0,1,1,0,
    1,0,0,0,
    0,0,1,0,
    1,1,0,0,

    // t
    0,0,0,0,
    0,1,0,0,
    1,1,1,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,1,0,

    // u
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,

    // v
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,0,0,1,
    1,0,0,1,
    0,1,1,0,
    0,1,1,0,

    // w
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,0,0,1,
    1,0,0,1,
    1,1,1,1,
    1,0,0,1,

    // x
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,0,0,1,
    0,1,0,1,
    1,0,1,0,
    1,0,0,1,

    // y
    0,0,0,0,
    1,0,0,1,
    1,0,0,1,
    1,0,0,1,
    0,1,1,1,
    1,0,0,1,
    0,1,1,0,

    // z
    0,0,0,0,
    0,0,0,0,
    0,0,0,0,
    1,1,1,1,
    0,0,1,0,
    0,1,0,0,
    1,1,1,1,

    // {
    0,1,1,0,
    0,1,0,0,
    0,1,0,0,
    1,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,1,0,

    // |
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,
    0,1,0,0,

    // }
    0,1,1,0,
    0,0,1,0,
    0,0,1,0,
    0,0,1,1,
    0,0,1,0,
    0,0,1,0,
    0,1,1,0,
};
// clang-format on

const int glyph_width = 4;
const int glyph_height = 7;

struct Font {
    ID3D11VertexShader* vs;
    ID3D11PixelShader* ps;
    unsigned size;
    unsigned char_space;

    int char_pos_location;
    int screen_pos_location;
    int viewport_location;
    int font_size_location;
    int color_location;
    int glyph_dims_location;
};

const char* vs_text = R"(
struct VS_INPUT {
    float2 position : POSITION0;
    float2 texcoord : TEXCOORD0;
};

struct VS_OUTPUT {
    float4 position : SV_POSITION;
    float2 tex_coord : TEXCOORD0;
};

cbuffer Constants : register(b0) {
    float2 viewport;
    float2 screen_pos;
    float2 font_size;
};

VS_OUTPUT main(VS_INPUT input) {
    VS_OUTPUT output;
    
    float2 vpos2 = screen_pos + input.position * font_size;
    float2 clip_pos = lerp(float2(-1.0, 1.0), float2(1.0, -1.0), vpos2 / viewport);
    
    output.position = float4(clip_pos, 0.0, 1.0);
    output.tex_coord = input.texcoord;
    
    return output;
}
)";

const char* ps_text = R"(
struct PS_INPUT {
    float4 position : SV_POSITION;
    float2 tex_coord : TEXCOORD0;
};

cbuffer Constants : register(b0) {
    int2 glyph_dims;
    int char_pos;
    float4 color;
};

cbuffer GlyphData : register(b1) {
    int4 glyphs[93 * 28];
};

int sample_glyph_with_index(int index) {
    int a = index / glyph_dims.x;
    int b = index % glyph_dims.x;
    return glyphs[a][b];
}

int sample_glyph(float2 tex_coord) {
    int x = (int)floor(lerp(0.0, glyph_dims.x - 0.1, tex_coord.x));
    int y = (int)floor(lerp(0.0, glyph_dims.y - 0.1, tex_coord.y));
    int glyph_size = glyph_dims.x * glyph_dims.y;
    return sample_glyph_with_index(glyph_size * char_pos + x + y * glyph_dims.x);
}

float4 main(PS_INPUT input) : SV_TARGET {
    if (sample_glyph(input.tex_coord) == 0) {
        discard;
    } else {
        return color;
    }
}
)";

Status font_init(Font* font, u32 size, u32 char_space) {
    if (!font) {
        return Status::Error;
    }

    return Status::Success;
}

void font_cleanup(Font* font) {
    if (!font) {
        return;
    }
}

struct Graphics;
void font_draw(Graphics* graphics, const Font& font, const char* text, int x,
               int y, int viewport[2], float color[4]) {}

}  // namespace glfont